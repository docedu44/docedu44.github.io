(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{148:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return b}));var r=t(0),a=t.n(r);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=a.a.createContext({}),l=function(e){var n=a.a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=l(e.components);return a.a.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},m=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,c=e.originalType,o=e.parentName,i=u(e,["components","mdxType","originalType","parentName"]),d=l(t),m=r,b=d["".concat(o,".").concat(m)]||d[m]||p[m]||c;return t?a.a.createElement(b,s(s({ref:n},i),{},{components:t})):a.a.createElement(b,s({ref:n},i))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var c=t.length,o=new Array(c);o[0]=m;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var i=2;i<c;i++)o[i]=t[i];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},88:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return u})),t.d(n,"default",(function(){return l}));var r=t(3),a=t(7),c=(t(0),t(148)),o={id:"redux-toolkit-summary",title:"Redux Toolkit 2",author:"mamad"},s={unversionedId:"experiences/react/redux-tool-kit/redux-toolkit-summary",id:"experiences/react/redux-tool-kit/redux-toolkit-summary",isDocsHomePage:!1,title:"Redux Toolkit 2",description:"\u0627\u0648\u0644 \u0627\u0632 \u0647\u0645\u0647 \u0627\u06cc\u0646\u062c\u0627 \u06cc\u0647 \u0641\u0627\u06cc\u0644 \u062f\u0631\u0633\u062a \u0645\u06cc\u06a9\u0646\u06cc\u0645 : src/app/store.js",source:"@site/docs/experiences/react/redux-tool-kit/redux-toolkit-summary.mdx",slug:"/experiences/react/redux-tool-kit/redux-toolkit-summary",permalink:"/docs/experiences/react/redux-tool-kit/redux-toolkit-summary",version:"current",sidebar:"someSidebar",previous:{title:"redux tool kit",permalink:"/docs/experiences/react/redux-tool-kit/reduxtoolkit"},next:{title:"TS in React",permalink:"/docs/experiences/react/tsx/ts-in-react"}},u=[],i={toc:u};function l(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},i,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("p",null,"\u0627\u0648\u0644 \u0627\u0632 \u0647\u0645\u0647 \u0627\u06cc\u0646\u062c\u0627 \u06cc\u0647 \u0641\u0627\u06cc\u0644 \u062f\u0631\u0633\u062a \u0645\u06cc\u06a9\u0646\u06cc\u0645 : ",Object(c.b)("inlineCode",{parentName:"p"},"src/app/store.js")),Object(c.b)("p",null,"\u0628\u0639\u062f \u0628\u0631\u0627\u06cc \u0627\u06cc\u0646\u06a9\u0647 \u06cc\u0647 \u0627\u0633\u062a\u0648\u0631 \u062e\u0627\u0644\u06cc \u062f\u0631\u0633\u062a \u06a9\u0646\u06cc\u0645 \u0627\u0632 \u06a9\u062f \u0647\u0627\u06cc \u0632\u06cc\u0631 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0645\u06cc \u06a9\u0646\u06cc\u0645: (\u0647\u0645\u0686\u0646\u06cc\u0646 \u0645\u0633\u062a\u0642\u06cc\u0645\u0627 \u0628\u0647 ",Object(c.b)("strong",{parentName:"p"},"redux devtools")," \u0647\u0645 \u0648\u0635\u0644 \u0645\u06cc\u0634\u0647)"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-javascript"},"    import {configureStore} from '@reduxjs/toolkit'\n\n    export default configureStore({\n        reducer: {},\n    })\n")),Object(c.b)("p",null,"\u062d\u0627\u0644\u0627 \u0641\u0642\u0637 \u06a9\u0627\u0641\u06cc\u0647 \u06a9\u0647 \u062a\u0648\u0648 \u0645\u0633\u06cc\u0631 ",Object(c.b)("inlineCode",{parentName:"p"},"src/index.js")," \u06a9\u0644 \u0627\u067e \u0645\u0648\u0646 \u0631\u0648 \u062f\u0627\u062e\u0644 \u0627\u0633\u062a\u0648\u0631 \u0642\u0631\u0627\u0631 \u0628\u062f\u06cc\u0645 \u062a\u0627 \u0647\u0631\u062c\u0627\u06cc \u0627\u067e \u0628\u0647 \u0627\u0633\u062a\u0648\u0631\u0645\u0648\u0646 \u062f\u0633\u062a\u0631\u0633\u06cc \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u06cc\u0645:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-javascript"},"    import React from 'react'\n    import ReactDOM from 'react-dom'\n    import './index.css'\n    import App from './App'\n    import store from './app/store'\n    import {Provider} from 'react-redux'\n\n    ReactDOM.render(\n        <Provider store={store}>\n            <App/>\n        </Provider>,\n        document.getElementById('root')\n    )\n")),Object(c.b)("p",null,"\u062d\u0627\u0644\u0627 \u0627\u06cc\u0646 \u0641\u0627\u06cc\u0644 \u0631\u0648 \u0645\u06cc \u0633\u0627\u0632\u06cc\u0645 : ",Object(c.b)("inlineCode",{parentName:"p"},"src/features/counter/counterSlice.js")," \u0628\u0639\u062f\u0634 \u0645\u06cc\u0627\u06cc\u06cc\u0645 \u0627\u0632 ",Object(c.b)("inlineCode",{parentName:"p"},"createSlice")," \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0645\u06cc \u06a9\u0646\u06cc\u0645"),Object(c.b)("p",null,"\u0627\u06cc\u0646 \u0641\u0627\u06cc\u0644 \u0628\u0647 \u06cc\u06a9 \u0627\u0633\u0645 \u0631\u0634\u062a\u0647 \u0627\u06cc \u0628\u0631\u0627\u06cc \u0646\u0627\u0645\u06af\u0630\u0627\u0631\u06cc\u060c \u06cc\u06a9 \u0645\u0642\u062f\u0627\u0631 \u0627\u0648\u0644\u06cc\u0647 \u0648 \u06cc\u06a9 \u06cc\u0627 \u0686\u0646\u062f \u062a\u0627\u0628\u0639 reducer \u0628\u0631\u0627\u06cc \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u0631\u0648\u06cc \u0645\u062a\u063a\u06cc\u06cc\u0631\u0645\u0627\u0646 \u0646\u06cc\u0627\u0632 \u062f\u0627\u0631\u062f"),Object(c.b)("p",null,"( \u0627\u06cc\u0646 \u0631\u0648\u0646\u062f \u0628\u0647 \u0627\u06cc\u0646 \u0635\u0648\u0631\u062a \u0627\u0633\u062a \u06a9\u0647 redux \u0627\u0632 \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u0645\u0627 \u06a9\u067e\u06cc \u0645\u06cc \u06af\u06cc\u0631\u062f \u0648 \u0633\u067e\u0633 \u062a\u063a\u06cc\u06cc\u0631\u0627\u062a \u0631\u0627 \u0631\u0648\u06cc \u06a9\u067e\u06cc \u0627\u0639\u0645\u0627\u0644 \u0645\u06cc \u06a9\u0646\u062f )"),Object(c.b)("p",null,"\u062d\u0627\u0644 \u0627\u0632 \u06a9\u062f \u0647\u0627\u06cc \u0632\u06cc\u0631 \u0628\u0631\u0627\u06cc \u067e\u06cc\u06a9\u0631\u0628\u0646\u062f\u06cc \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0645\u06cc \u06a9\u0646\u06cc\u0645:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},"    import {createSlice} from '@reduxjs/toolkit'\n\n    export const counterSlice = createSlice({\n        name: 'counter',\n        initialState: {\n            value: 0,\n        },\n        reducers: {\n            increment: (state) => {\n                // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n                // doesn't actually mutate the state because it uses the Immer library,\n                // which detects changes to a \"draft state\" and produces a brand new\n                // immutable state based off those changes\n                state.value += 1\n            },\n            decrement: (state) => {\n                state.value -= 1\n            },\n            incrementByAmount: (state, action) => {\n                state.value += action.payload\n            },\n        },\n    })\n\n    // Action creators are generated for each case reducer function\n    export const {increment, decrement, incrementByAmount} = counterSlice.actions\n\n    export default counterSlice.reducer\n")),Object(c.b)("p",null,"\u062d\u0627\u0644\u0627 \u0628\u0631\u0627\u06cc \u0627\u06cc\u0646\u06a9\u0647 \u0627\u06cc\u0646 slice \u06a9\u0647 \u0633\u0627\u062e\u062a\u06cc\u0645 \u0631\u0648 \u0628\u0647 ",Object(c.b)("inlineCode",{parentName:"p"},"store/index.js")," \u0628\u062f\u06cc\u0645 \u0628\u0627\u06cc\u062f \u0628\u0647 \u0635\u0648\u0631\u062a \u0632\u06cc\u0631 \u0639\u0645\u0644 \u06a9\u0646\u06cc\u0645:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},"    import { configureStore } from '@reduxjs/toolkit'\n    import counterReducer from '../features/counter/counterSlice'\n\n    export default configureStore({\n    reducer: {\n    counter: counterReducer,\n},\n})\n")),Object(c.b)("p",null,"\u062d\u0627\u0644\u0627 \u0628\u0631\u0627\u06cc \u0627\u06cc\u0646\u06a9\u0647 \u06cc\u0647 \u06a9\u0627\u0645\u067e\u0648\u0646\u0646\u062a \u062a\u0633\u062a \u062f\u0631\u0633\u062a \u06a9\u0646\u06cc\u0645\u060c \u062a\u0648\u0648 ",Object(c.b)("inlineCode",{parentName:"p"},"src/features/counter/Counter.js")," \u06cc\u0647 \u0641\u0627\u06cc\u0644 \u0645\u06cc \u0633\u0627\u0632\u06cc\u0645 \u0648 \u0628\u0639\u062f\u0634 \u0627\u0648\u0646\u0648 \u062a\u0648\u0648 ",Object(c.b)("inlineCode",{parentName:"p"},"App.js")," \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0645\u06cc \u06a9\u0646\u06cc\u0645: ( \u062d\u062a\u0645\u0627 \u062a\u0648\u0627\u0628\u0639 \u062f\u0631\u0648\u0646 dispatch \u0647\u0627 \u0628\u0627 () \u0628\u0627\u0634\u062f. )"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},"    import React from 'react'\n    import { useSelector, useDispatch } from 'react-redux'\n    import { decrement, increment } from './counterSlice'\n\n    export function Counter() {\n    const count = useSelector((state) => state.counter.value)\n    const dispatch = useDispatch()\n\n    return (\n        <div>\n            <div>\n                <button\n                aria-label=\"Increment value\"\n                onClick={() => dispatch(increment())}\n                >\n                    Increment\n                </button>\n                <span>{count}</span>\n                <button\n                aria-label=\"Decrement value\"\n                onClick={() => dispatch(decrement())}\n                >\n                    Decrement\n                </button>\n            </div>\n        </div>\n    )\n}\n")),Object(c.b)("p",null,"\u062d\u0627\u0644 \u0627\u06af\u0631 \u0628\u062e\u0648\u0627\u0647\u06cc\u0645 \u06a9\u062f\u0645\u0627\u0646 \u0631\u0627 \u0628\u0647 \u0635\u0648\u0631\u062a async \u0628\u0646\u0648\u06cc\u0633\u06cc\u0645 (\u0645\u062b\u0644\u0627 \u0628\u0631\u0627\u06cc \u0644\u0627\u06af\u06cc\u0646 \u0648 ... \u06a9\u0647 \u0646\u06cc\u0627\u0632 \u0627\u0633\u062a \u0627\u0648\u0644 \u062f\u0627\u062f\u0647 \u0647\u0627 \u0631\u0627 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u06cc\u0645 \u0633\u067e\u0633 \u0628\u0631 \u0627\u0633\u0627\u0633 \u062f\u0627\u062f\u0647 \u0647\u0627 \u0686\u06cc\u0632\u06cc \u0631\u0627 \u0631\u0646\u062f\u0631 \u06a9\u0646\u06cc\u0645) \u0628\u0627\u06cc\u062f \u0628\u0647 \u0635\u0648\u0631\u062a \u0632\u06cc\u0631 \u0639\u0645\u0644 \u06a9\u0646\u06cc\u0645:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},'    import {createSlice, createAsyncThunk} from \'@reduxjs/toolkit\';\n\n    const initialState= {\n        value: 0,\n        status: "idle"\n    }\n\n    // make a function like api\n    function fetchCount(amount = 1) {\n        return new Promise((resolve) =>\n            setTimeout(() => resolve({ data: amount }), 1000)\n        );\n    }\n\n    // create function out of createSlice() and use createAsyncThunk() for async function\n    export const incrementAsync = createAsyncThunk(\n        "counter/fetchCount",\n        async (num)=> {\n            const response = await fetchCount(num);\n            return response.data\n        }\n    )\n\n    export const counterSlice = createSlice({\n        name: "counter",\n        initialState,\n        reducers: {\n            increment: (state) => {\n                state.value += 1;\n            },\n            decrement: (state) => {\n                state.value -= 1;\n            },\n            incrementByAmount: (state, action) => {\n                state.value += action.payload\n            }\n        },\n\n    // use builder instead of switch case and use pending, fulfield and rejected\n    extraReducers:(builder) => {\n        builder\n            .addCase(incrementAsync.pending, (state) => {\n                state.status = "loading";\n                console.log(state.status);\n            }).addCase(incrementAsync.fulfilled, (state, action)=> {\n                state.status = "idle";\n                console.log(state.status);\n                state.value += action.payload;\n            }).addCase(incrementAsync.rejected, (state, err) => {\n                state.status = "idle";\n                console.log(err);\n            })\n    }\n});\n\n    export const {increment, decrement, incrementByAmount} = counterSlice.actions;\n\n    export default counterSlice.reducer;\n')),Object(c.b)("p",null,"\u062a\u0648\u0627\u0628\u0639 extraReducer \u0648 createAsyncThunk \u0641\u0642\u0637 \u0628\u0631\u0627\u06cc \u0639\u0645\u0644\u06cc\u0627\u062a async \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0645\u06cc \u0634\u0648\u062f"),Object(c.b)("p",null,"\u0647\u0631\u06af\u0627\u0647 \u0628\u062e\u0648\u0627\u0647\u06cc\u0645 \u0647\u0646\u06af\u0627\u0645 reject \u0634\u062f\u0646 \u06a9\u0644 \u062f\u0627\u062f\u0647 \u0647\u0627\u06cc \u0627\u0631\u0648\u0631 \u0631\u0627 \u0628\u0631\u0627\u06cc \u0645\u0627 \u0628\u0631\u06af\u0631\u062f\u0627\u0646\u062f\u060c \u0628\u0627\u06cc\u062f \u0628\u0647 \u0635\u0648\u0631\u062a \u0632\u06cc\u0631 \u0639\u0645\u0644 \u06a9\u0646\u06cc\u0645"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-js"},'    import {createSlice, createAsyncThunk} from \'@reduxjs/toolkit\';\n\n    const initialState= {\n        value: 0,\n        status: "idle"\n    }\n\n    // make a function like api\n    function fetchCount(amount = 1) {\n        return new Promise((resolve) =>\n            setTimeout(() => resolve({ data: amount }), 1000)\n        );\n    }\n\n    // create function out of createSlice() and use createAsyncThunk() for async function\n    export const incrementAsync = createAsyncThunk(\n        "counter/fetchCount",\n        async (num, {rejectWithValue}) => {\n            try {\n                const response = await fetchCount(num);\n            return {\n                data: response.data,\n                status\n            }\n        } catch (e) {\n            //! return all errors data\n            return rejectWithValue({\n                data: e.response.data,\n                status: e.response.status\n                })\n            }\n        }\n    )\n\n    export const counterSlice = createSlice({\n        name: "counter",\n        initialState,\n        reducers: {\n            increment: (state) => {\n            state.value += 1;\n    },\n        decrement: (state) => {\n            state.value -= 1;\n    },\n        incrementByAmount: (state, action) => {\n            state.value += action.payload\n    }\n},\n\n    // use builder instead of switch case and use pending, fulfield and rejected\n    extraReducers:(builder) => {\n        builder\n            .addCase(incrementAsync.pending, (state) => {\n                state.status = "loading";\n                console.log(state.status);\n            }).addCase(incrementAsync.fulfilled, (state, action)=> {\n                state.status = "idle";\n                console.log(state.status);\n                state.value += action.payload;\n            }).addCase(incrementAsync.rejected, (state, err) => {\n                state.status = "idle";\n                console.log(err);\n                console.log(err.payload.status);\n            })\n        }\n    });\n\n    export const {increment, decrement, incrementByAmount} = counterSlice.actions;\n\n    export default counterSlice.reducer;\n')))}l.isMDXComponent=!0}}]);